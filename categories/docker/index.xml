<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Harisankar P S | HsPS.in</title>
    <link>https://hsps.in/categories/docker/</link>
    <description>Recent content in Docker on Harisankar P S | HsPS.in</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Harisankar P S</copyright>
    <lastBuildDate>Tue, 21 Jan 2025 12:28:12 +0530</lastBuildDate>
    <atom:link href="https://hsps.in/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Store Docker Data to a Different Partition</title>
      <link>https://hsps.in/post/store-docker-data-to-a-different-partition/</link>
      <pubDate>Tue, 21 Jan 2025 12:28:12 +0530</pubDate>
      <guid>https://hsps.in/post/store-docker-data-to-a-different-partition/</guid>
      <description></description>
    </item>
    <item>
      <title>Using Docker to export &amp; import data from Amazon RDS</title>
      <link>https://hsps.in/post/using-docker-postgres-to-take-sql-dump-from-aws-rds/</link>
      <pubDate>Mon, 23 Sep 2024 04:38:52 -0700</pubDate>
      <guid>https://hsps.in/post/using-docker-postgres-to-take-sql-dump-from-aws-rds/</guid>
      <description>&lt;p&gt;Docker is an efficient way to use command-line tools without needing to install them or their required libraries. Recently, I had a use case where I needed to take an SQL dump of a schema from a PostgreSQL database. The problem was that the PostgreSQL DB was version 16.3, while my local DB was only version 15. Using my local &lt;code&gt;pg_dump&lt;/code&gt; to access the remote database resulted in a version incompatibility error. To fix this, I would either need to upgrade &lt;code&gt;pg_dump&lt;/code&gt; or have both versions installed simultaneously on my machine. I didn&amp;rsquo;t want to do either. This is where Docker came to the rescue.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup HTTP(s) and Reverse Proxy to Docker Web App</title>
      <link>https://hsps.in/post/setup-https-and-reverseproxy-to-docker-web-app/</link>
      <pubDate>Thu, 03 Aug 2023 22:31:40 -0700</pubDate>
      <guid>https://hsps.in/post/setup-https-and-reverseproxy-to-docker-web-app/</guid>
      <description>&lt;p&gt;This article is about how to add https to a web app running in docker. For this we are using nginx to handle port 80 and port 443 and then reverse proxy the traffic to port 443 to the application port. In this article we are assuming you have credentials for the SSL certificate, another article will be written on how to do it with lets encrypt to create ssl certificates for free.&lt;/p&gt;&#xA;&lt;p&gt;This article assume you know about ssl key files, docker and docker-compose. And for the sake of this article we are setting up &lt;code&gt;uptime-kuma&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rails Copy Assets bundler Cache to Speed Up Build</title>
      <link>https://hsps.in/post/rails-copy-assets-bundler-cache-to-speed-up-build/</link>
      <pubDate>Tue, 01 Aug 2023 17:01:37 -0700</pubDate>
      <guid>https://hsps.in/post/rails-copy-assets-bundler-cache-to-speed-up-build/</guid>
      <description>The slowest step (in my experience and opinion) is compiling assets (js/css). Compiling assets takes time and slower when you do it for the first time. So to speed it up its recommended to copy the last compiled assets from the latest image you have of the repo.&#xA;1 2 3 4 COPY --from=docker-repo.link/image:latest /app/node_modules /app/node_modules COPY --from=docker-repo.link/image:latest /app/public /app/public RUN bundle exec rails assets:precompile Now since the prior assets are in the new image, it won&amp;rsquo;t compile the assets from scratch and the build will be faster.</description>
    </item>
    <item>
      <title>Share Docker Images as Files</title>
      <link>https://hsps.in/post/share-docker-images-as-files/</link>
      <pubDate>Sun, 26 Mar 2023 21:27:35 -0700</pubDate>
      <guid>https://hsps.in/post/share-docker-images-as-files/</guid>
      <description>&lt;p&gt;Docker is a popular tool to containerize and share images. Recently we ported a POS system into a docker image and had to share it with a client before we setup a private registry. This is how we share the image from my dev machine to clients local server.&lt;/p&gt;&#xA;&lt;p&gt;Dev Machine: Kubuntu, 22.04&lt;/p&gt;</description>
    </item>
    <item>
      <title>Speed Up Docker Build using cache</title>
      <link>https://hsps.in/post/speed-up-docker-build-using-cache/</link>
      <pubDate>Fri, 10 Mar 2023 20:04:50 -0800</pubDate>
      <guid>https://hsps.in/post/speed-up-docker-build-using-cache/</guid>
      <description>&lt;p&gt;Docker has become a popular tool in recent years for building and deploying applications in a portable and scalable way. However, the build process can sometimes be slow, especially for large applications with many dependencies. In this article, we&amp;rsquo;ll explore how we can optimize our Dockerfile to speed it up.&lt;/p&gt;&#xA;&lt;p&gt;When building a rails app for production we would need to do the following steps in the docker file&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;COPY . .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bundle install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yarn install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bundle &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; rails assets:precompile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Docker after building each step it will cache that step. If the instructions/context of that steps or steps before haven&amp;rsquo;t change then docker will use the cache.&lt;/p&gt;&#xA;&lt;p&gt;So we need to make docker understand that there is no change, hence we can use the cache instead of rebuilding it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enable Docker Remote Api on Docker Host</title>
      <link>https://hsps.in/post/enable-docker-remote-api-on-docker-host/</link>
      <pubDate>Tue, 06 Sep 2022 20:21:42 -0700</pubDate>
      <guid>https://hsps.in/post/enable-docker-remote-api-on-docker-host/</guid>
      <description>&lt;p&gt;Docker engine has inbuild API service that allows you to control &amp;amp; modify your docker engine and docker instance using HTTP.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
