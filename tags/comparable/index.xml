<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Comparable on Harisankar P S | Ruby on Rails Developer</title>
    <link>https://hsps.in/tags/comparable/</link>
    <description>Recent content in Comparable on Harisankar P S | Ruby on Rails Developer</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Harisankar P S</copyright>
    <lastBuildDate>Mon, 02 Jun 2025 11:50:45 +0530</lastBuildDate>
    <atom:link href="https://hsps.in/tags/comparable/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ruby `Data` Class – A Convenient Way to Create Value Objects</title>
      <link>https://hsps.in/post/intro-to-ruby-data-and-comparable/</link>
      <pubDate>Mon, 02 Jun 2025 11:50:45 +0530</pubDate>
      <guid>https://hsps.in/post/intro-to-ruby-data-and-comparable/</guid>
      <description>&lt;p&gt;Ruby&amp;rsquo;s &lt;code&gt;Data&lt;/code&gt; class was introduced in Ruby 3.2, offering a convenient way to define value objects. The concept of value objects was popularized by Martin Fowler and Eric Evans through their books and articles. In the real world, we often represent properties like coordinates on a map &lt;code&gt;(x, y)&lt;/code&gt; or the speed of a car—using primitives such as integers or strings. While these work, they lack the semantic clarity and behavior of custom types. This is where value objects shine. They encapsulate meaning and behavior around a set of values.&lt;/p&gt;&#xA;&lt;p&gt;Ruby&amp;rsquo;s &lt;code&gt;Data&lt;/code&gt; class was created to provide a native way to represent such concepts. Struct does fullfil this requirement, except the part of immutability. Ruby Structs are mutable. Some example of use case for value objects are to represent money, email address, co-ordinates, etc.&lt;/p&gt;&#xA;&lt;p&gt;Lets now explore ruby Data, keeping in my the characteristics of a value object as shared by Marin Fowler. A value object&#xA;should have:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;No Identity&lt;/li&gt;&#xA;&lt;li&gt;Immutable&lt;/li&gt;&#xA;&lt;li&gt;Equality by Value&lt;/li&gt;&#xA;&lt;li&gt;Small and Simple&lt;/li&gt;&#xA;&lt;li&gt;Reusable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s explore how Ruby&amp;rsquo;s &lt;code&gt;Data&lt;/code&gt; class supports these characteristics.&lt;/p&gt;&#xA;&lt;h3 id=&#34;class-data&#34;&gt;class Data&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Data&lt;/code&gt; is a core Ruby class, so no external gems are needed.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a simple example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;MarsRover&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
