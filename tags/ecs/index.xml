<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ecs on Harisankar P S | HsPS.in</title>
    <link>https://hsps.in/tags/ecs/</link>
    <description>Recent content in ecs on Harisankar P S | HsPS.in</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Oct 2024 00:05:58 -0700</lastBuildDate><atom:link href="https://hsps.in/tags/ecs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running Rails Migrations in AWS ECS Using AWS CLI</title>
      <link>https://hsps.in/post/run-rails-db-migrate-on-ecs-task-aws/</link>
      <pubDate>Thu, 10 Oct 2024 00:05:58 -0700</pubDate>
      
      <guid>https://hsps.in/post/run-rails-db-migrate-on-ecs-task-aws/</guid>
      <description>&lt;p&gt;AWS ECS (Elastic Container Service) is a powerful Amazon Web Service that allows you to deploy Docker containers on various infrastructure options, including EC2 instances, Fargate (serverless containers), or even self-hosted servers. Being deeply integrated with AWS, ECS offers a cost-effective and seamless solution for managing containers in the Amazon ecosystem.&lt;/p&gt;
&lt;p&gt;This guide assumes you are familiar with ECS and already have a task definition set up for your Rails application. Additionally, it assumes you know how to find your subnet ID and security group ID, as these will be required when running containers in your specific environment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sidekiq Graceful Shutdown in Fargate ECS</title>
      <link>https://hsps.in/post/sidekiq-graceful-shutdown-in-fargate-ecs/</link>
      <pubDate>Sun, 30 Jul 2023 00:10:21 -0700</pubDate>
      
      <guid>https://hsps.in/post/sidekiq-graceful-shutdown-in-fargate-ecs/</guid>
      <description>&lt;p&gt;Sidekiq is the gold standard when it comes to background processing. I have been using since I started working with rails. Sidekiq took care of lot of the complexity of the background processing that allowed developers to concentrate on just there code/business logic.&lt;/p&gt;
&lt;p&gt;One of the beautiful features of sidekiq was how it handled exit (SIGTERM and SIGKILL).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://turnoff.us/image/en/dont-sigkill-2.png&#34; alt=&#34;Dont Sigkill&#34;&gt;
Source: &lt;a href=&#34;https://turnoff.us/geek/dont-sigkill-2/&#34;&gt;https://turnoff.us/geek/dont-sigkill-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When sidekiq received the sigterm commands it stops accept new jobs, and just focus on finishing the job it is doing now and incase it can&amp;rsquo;t finish, it will requeue the job to another available worker or keep it in the queue for another worker (or the same worker) to pick it up when available.
This was working so well for years on rails app I was working on, that I didn&amp;rsquo;t even care about it. The mina command would trigger a sidekiq restart allowing sidekiq to gracefully exit and then respawn with the new code.&lt;/p&gt;
&lt;p&gt;The above app was running on two linux servers everything manually configured, but recently to keep up with the growth of the app we moved to amazon ECS. The app was containerized to a docker image, and made to run on about 12 Fargate Instances with ability to auto scale to 36 based on CPU and RAM usage. We grouped instances for various purposes 2 for heavy jobs, 2 for faster (more memory jobs), 2 for file processing, 4 for web, 2 for API.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
